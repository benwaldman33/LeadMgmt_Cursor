generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String               @id @default(cuid())
  email                String               @unique
  fullName             String
  role                 String               @default("ANALYST")
  status               String               @default("ACTIVE")
  teamId               String?
  passwordHash         String
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  lastLoginAt          DateTime?
  createdApifyActors   ApifyActor[]         @relation("ApifyActorCreator")
  auditLogs            AuditLog[]           @relation("UserAuditLogs")
  createdBusinessRules BusinessRule[]       @relation("BusinessRuleCreator")
  createdCampaigns     Campaign[]           @relation("CampaignCreator")
  discoveryExecutions  DiscoveryExecution[] @relation("UserDiscoveryExecutions")
  discoveryModels      DiscoveryModel[]     @relation("UserDiscoveryModels")
  discoverySessions    DiscoverySession[]   @relation("UserDiscoverySessions")
  assignedLeads        Lead[]               @relation("LeadAssignee")
  marketAnalyses       MarketAnalysis[]     @relation("UserMarketAnalyses")
  createdScoringModels ScoringModel[]       @relation("ScoringModelCreator")
  serviceUsage         ServiceUsage[]
  createdConfigs       SystemConfig[]       @relation("ConfigCreator")
  team                 Team?                @relation(fields: [teamId], references: [id])
  workflowExecutions   WorkflowExecution[]  @relation("UserWorkflowExecutions")
  createdWorkflows     Workflow[]           @relation("WorkflowCreator")

  @@map("users")
}

model Team {
  id        String     @id @default(cuid())
  name      String
  industry  String
  leadId    String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  campaigns Campaign[] @relation("TeamCampaigns")
  leads     Lead[]     @relation("TeamLeads")
  members   User[]

  @@map("teams")
}

model Campaign {
  id               String        @id @default(cuid())
  name             String
  industry         String
  status           String        @default("PLANNING")
  scoringModelId   String?
  assignedTeamId   String?
  createdById      String
  targetLeadCount  Int?
  currentLeadCount Int           @default(0)
  startDate        DateTime?
  targetEndDate    DateTime?
  actualEndDate    DateTime?
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  assignedTeam     Team?         @relation("TeamCampaigns", fields: [assignedTeamId], references: [id])
  createdBy        User          @relation("CampaignCreator", fields: [createdById], references: [id])
  scoringModel     ScoringModel? @relation(fields: [scoringModelId], references: [id])
  leads            Lead[]

  @@map("campaigns")
}

model ScoringModel {
  id          String             @id @default(cuid())
  name        String
  industry    String
  isActive    Boolean            @default(true)
  createdById String
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  campaigns   Campaign[]
  criteria    ScoringCriterion[]
  createdBy   User               @relation("ScoringModelCreator", fields: [createdById], references: [id])

  @@map("scoring_models")
}

model ScoringCriterion {
  id             String       @id @default(cuid())
  name           String
  description    String?
  searchTerms    String
  weight         Int
  type           String       @default("KEYWORD")
  scoringModelId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  scoringModel   ScoringModel @relation(fields: [scoringModelId], references: [id], onDelete: Cascade)

  @@map("scoring_criteria")
}

model Lead {
  id                   String              @id @default(cuid())
  url                  String
  companyName          String
  domain               String
  industry             String
  status               String              @default("RAW")
  score                Float?
  externalId           String?
  externalSource       String?
  campaignId           String
  assignedToId         String?
  assignedTeamId       String?
  discoveryExecutionId String?
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  lastScoredAt         DateTime?
  enrichment           LeadEnrichment?
  assignedTeam         Team?               @relation("TeamLeads", fields: [assignedTeamId], references: [id])
  assignedTo           User?               @relation("LeadAssignee", fields: [assignedToId], references: [id])
  campaign             Campaign            @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  discoveryExecution   DiscoveryExecution? @relation("DiscoveryExecutionLeads", fields: [discoveryExecutionId], references: [id])
  ruleExecutionLogs    RuleExecutionLog[]
  scoringDetails       ScoringResult?
  workflowExecutions   WorkflowExecution[] @relation("LeadWorkflowExecutions")

  @@map("leads")
}

model ScoringResult {
  id                  String           @id @default(cuid())
  totalScore          Float
  confidence          Float
  scoredAt            DateTime         @default(now())
  scoringModelVersion String
  leadId              String           @unique
  criteriaScores      CriterionScore[]
  lead                Lead             @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@map("scoring_results")
}

model CriterionScore {
  id              String        @id @default(cuid())
  criterionId     String
  score           Float
  matchedContent  String
  confidence      Float
  scoringResultId String
  scoringResult   ScoringResult @relation(fields: [scoringResultId], references: [id], onDelete: Cascade)

  @@map("criterion_scores")
}

model LeadEnrichment {
  id                String    @id @default(cuid())
  companySize       Int?
  revenue           String?
  industry          String?
  technologies      String
  scrapedContent    String?
  pageTitle         String?
  pageDescription   String?
  pageKeywords      String?
  pageLanguage      String?
  lastModified      String?
  companyName       String?
  services          String?
  certifications    String?
  contactEmail      String?
  contactPhone      String?
  contactAddress    String?
  scrapingTimestamp DateTime  @default(now())
  processingTime    Int?
  scrapingSuccess   Boolean   @default(true)
  scrapingError     String?
  leadId            String    @unique
  source            String    @default("WEB_SCRAPING")
  enrichedAt        DateTime  @default(now())
  contacts          Contact[]
  lead              Lead      @relation(fields: [leadId], references: [id], onDelete: Cascade)

  @@map("lead_enrichments")
}

model Contact {
  id               String         @id @default(cuid())
  name             String
  email            String?
  title            String?
  linkedinUrl      String?
  isPrimaryContact Boolean        @default(false)
  enrichmentId     String
  enrichment       LeadEnrichment @relation(fields: [enrichmentId], references: [id], onDelete: Cascade)

  @@map("contacts")
}

model AIModel {
  id          String   @id @default(cuid())
  name        String
  type        String
  features    String
  performance String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("ai_models")
}

model MarketAnalysis {
  id              String           @id @default(cuid())
  name            String
  criteria        String
  results         String
  status          String           @default("completed")
  createdById     String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  discoveryModels DiscoveryModel[]
  createdBy       User             @relation("UserMarketAnalyses", fields: [createdById], references: [id])

  @@map("market_analyses")
}

model DiscoveryModel {
  id                 String               @id @default(cuid())
  name               String
  industry           String
  subIndustry        String
  product            String
  marketSize         Int?
  buyerProfile       String
  searchStrategy     String
  targetCriteria     String
  isActive           Boolean              @default(true)
  lastExecuted       DateTime?
  executionCount     Int                  @default(0)
  performanceMetrics String?
  createdById        String
  marketAnalysisId   String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  executions         DiscoveryExecution[]
  createdBy          User                 @relation("UserDiscoveryModels", fields: [createdById], references: [id])
  marketAnalysis     MarketAnalysis?      @relation(fields: [marketAnalysisId], references: [id])

  @@map("discovery_models")
}

model DiscoveryExecution {
  id                String               @id @default(cuid())
  name              String
  status            String               @default("planning")
  phase             String               @default("market_research")
  prospectsFound    Int                  @default(0)
  prospectsAnalyzed Int                  @default(0)
  leadsQualified    Int                  @default(0)
  leadsCreated      Int                  @default(0)
  executionConfig   String
  sourceResults     String?
  analysisResults   String?
  qualityMetrics    String?
  errorMessage      String?
  errorDetails      String?
  totalCost         Float?
  avgLeadCost       Float?
  processingTime    Int?
  discoveryModelId  String
  triggeredById     String?
  startedAt         DateTime             @default(now())
  completedAt       DateTime?
  updatedAt         DateTime             @updatedAt
  prospects         DiscoveredProspect[]
  discoveryModel    DiscoveryModel       @relation(fields: [discoveryModelId], references: [id], onDelete: Cascade)
  triggeredBy       User?                @relation("UserDiscoveryExecutions", fields: [triggeredById], references: [id])
  createdLeads      Lead[]               @relation("DiscoveryExecutionLeads")

  @@map("discovery_executions")
}

model DiscoveredProspect {
  id                     String             @id @default(cuid())
  companyName            String?
  domain                 String?
  url                    String
  source                 String
  sourceId               String?
  rawData                String
  contentAnalysis        String?
  relevanceScore         Float?
  qualityScore           Float?
  confidenceScore        Float?
  isQualified            Boolean            @default(false)
  qualifiedAt            DateTime?
  disqualificationReason String?
  leadCreated            Boolean            @default(false)
  leadCreatedAt          DateTime?
  leadId                 String?
  discoveryExecutionId   String
  discoveredAt           DateTime           @default(now())
  analyzedAt             DateTime?
  updatedAt              DateTime           @updatedAt
  discoveryExecution     DiscoveryExecution @relation(fields: [discoveryExecutionId], references: [id], onDelete: Cascade)

  @@map("discovered_prospects")
}

model AuditLog {
  id          String   @id @default(cuid())
  action      String
  entityType  String
  entityId    String?
  description String
  userId      String?
  metadata    String?
  ipAddress   String?
  userAgent   String?
  createdAt   DateTime @default(now())
  user        User?    @relation("UserAuditLogs", fields: [userId], references: [id])

  @@map("audit_logs")
}

model Integration {
  id           String    @id @default(cuid())
  name         String
  type         String
  provider     String
  config       String
  isActive     Boolean   @default(true)
  lastSync     DateTime?
  syncStatus   String    @default("idle")
  errorMessage String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@map("integrations")
}

model Workflow {
  id          String              @id @default(cuid())
  name        String
  description String?
  trigger     String
  isActive    Boolean             @default(true)
  priority    Int                 @default(0)
  createdById String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  executions  WorkflowExecution[]
  steps       WorkflowStep[]
  createdBy   User                @relation("WorkflowCreator", fields: [createdById], references: [id])

  @@map("workflows")
}

model WorkflowStep {
  id         String   @id @default(cuid())
  name       String
  type       String
  order      Int
  config     String
  workflowId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  workflow   Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)

  @@map("workflow_steps")
}

model WorkflowExecution {
  id               String    @id @default(cuid())
  status           String
  startedAt        DateTime  @default(now())
  completedAt      DateTime?
  errorMessage     String?
  workflowId       String
  leadId           String?
  triggeredById    String?
  triggerData      String?
  stepResults      String?
  executionContext String?
  lead             Lead?     @relation("LeadWorkflowExecutions", fields: [leadId], references: [id])
  triggeredBy      User?     @relation("UserWorkflowExecutions", fields: [triggeredById], references: [id])
  workflow         Workflow  @relation(fields: [workflowId], references: [id])

  @@map("workflow_executions")
}

model BusinessRule {
  id            String             @id @default(cuid())
  name          String
  description   String?
  type          String
  conditions    String
  actions       String
  isActive      Boolean            @default(true)
  priority      Int                @default(0)
  createdById   String
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  createdBy     User               @relation("BusinessRuleCreator", fields: [createdById], references: [id])
  executionLogs RuleExecutionLog[]

  @@map("business_rules")
}

model RuleExecutionLog {
  id           String       @id @default(cuid())
  leadId       String
  ruleId       String
  triggerEvent String
  success      Boolean
  errorMessage String?
  executedAt   DateTime     @default(now())
  lead         Lead         @relation(fields: [leadId], references: [id])
  rule         BusinessRule @relation(fields: [ruleId], references: [id])

  @@map("rule_execution_logs")
}

model SystemConfig {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  description String?
  isEncrypted Boolean  @default(false)
  category    String   @default("GENERAL")
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdBy   User     @relation("ConfigCreator", fields: [createdById], references: [id])

  @@map("system_configs")
}

model ClaudeUsage {
  id                  String    @id @default(cuid())
  totalCalls          Int       @default(0)
  totalTokens         Int       @default(0)
  averageResponseTime Float     @default(0)
  errors              Int       @default(0)
  lastCall            DateTime?
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt

  @@map("claude_usage")
}

model ApifyActor {
  id           String   @id @default(cuid())
  name         String
  description  String?
  actorId      String
  apiToken     String
  isActive     Boolean  @default(true)
  defaultInput String?
  createdById  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  createdBy    User     @relation("ApifyActorCreator", fields: [createdById], references: [id])

  @@map("apify_actors")
}

model ApifyScrapingJob {
  id          String    @id @default(cuid())
  actorId     String
  urls        String
  industry    String    @default("general")
  status      String    @default("pending")
  results     String?
  error       String?
  apifyRunId  String?
  createdAt   DateTime  @default(now())
  completedAt DateTime?

  @@map("apify_scraping_jobs")
}

model ServiceProvider {
  id                String                    @id @default(cuid())
  name              String
  type              String
  isActive          Boolean                   @default(true)
  priority          Int                       @default(1)
  capabilities      String
  config            String
  limits            String
  scrapingConfig    String?
  createdAt         DateTime                  @default(now())
  updatedAt         DateTime                  @updatedAt
  operationMappings OperationServiceMapping[] @relation("ServiceProviderMappings")
  usageRecords      ServiceUsage[]            @relation("ServiceProviderUsage")

  @@map("service_providers")
}

model OperationServiceMapping {
  id        String          @id @default(cuid())
  operation String
  serviceId String
  isEnabled Boolean         @default(true)
  priority  Int             @default(1)
  config    String
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  service   ServiceProvider @relation("ServiceProviderMappings", fields: [serviceId], references: [id], onDelete: Cascade)

  @@unique([operation, serviceId])
  @@map("operation_service_mappings")
}

model ServiceUsage {
  id           String          @id @default(cuid())
  serviceId    String
  userId       String?
  operation    String
  tokensUsed   Int?
  cost         Float?
  duration     Int?
  success      Boolean
  errorMessage String?
  metadata     String?
  createdAt    DateTime        @default(now())
  service      ServiceProvider @relation("ServiceProviderUsage", fields: [serviceId], references: [id], onDelete: Cascade)
  user         User?           @relation(fields: [userId], references: [id])

  @@map("service_usage")
}

model Industry {
  id               String            @id @default(cuid())
  name             String            @unique
  description      String
  marketSize       String
  growthRate       String
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  productVerticals ProductVertical[]

  @@map("industries")
}

model ProductVertical {
  id            String         @id @default(cuid())
  name          String
  description   String
  marketSize    String
  growthRate    String
  isActive      Boolean        @default(true)
  industryId    String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  customerTypes CustomerType[]
  industry      Industry       @relation(fields: [industryId], references: [id], onDelete: Cascade)

  @@map("product_verticals")
}

model CustomerType {
  id                String          @id @default(cuid())
  name              String
  description       String
  characteristics   String[]
  buyingBehavior    String
  marketSegment     String
  estimatedValue    String
  isActive          Boolean         @default(true)
  productVerticalId String
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  productVertical   ProductVertical @relation(fields: [productVerticalId], references: [id], onDelete: Cascade)

  @@map("customer_types")
}

model DiscoverySession {
  id                  String                @id @default(cuid())
  userId              String
  industry            String
  productVertical     String?
  status              String                @default("exploring")
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  conversationHistory ConversationMessage[]
  user                User                  @relation("UserDiscoverySessions", fields: [userId], references: [id], onDelete: Cascade)

  @@map("discovery_sessions")
}

model ConversationMessage {
  id        String           @id @default(cuid())
  sessionId String
  role      String
  content   String
  metadata  String?
  timestamp DateTime         @default(now())
  session   DiscoverySession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@map("conversation_messages")
}
