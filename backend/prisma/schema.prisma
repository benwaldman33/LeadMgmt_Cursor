// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// User and Team Models
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  fullName  String
  role      String   @default("ANALYST")
  status    String   @default("ACTIVE")
  teamId    String?
  team      Team?    @relation(fields: [teamId], references: [id])
  
  // Authentication
  passwordHash String
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lastLoginAt DateTime?
  
  // Relations
  createdCampaigns Campaign[] @relation("CampaignCreator")
  assignedLeads     Lead[]    @relation("LeadAssignee")
  createdScoringModels ScoringModel[] @relation("ScoringModelCreator")
  auditLogs         AuditLog[] @relation("UserAuditLogs")
  createdWorkflows  Workflow[] @relation("WorkflowCreator")
  createdBusinessRules BusinessRule[] @relation("BusinessRuleCreator")
  workflowExecutions WorkflowExecution[] @relation("UserWorkflowExecutions")
  createdConfigs SystemConfig[] @relation("ConfigCreator")
  createdApifyActors ApifyActor[] @relation("ApifyActorCreator")
  
  // AI Market Discovery Relations
  marketAnalyses    MarketAnalysis[] @relation("UserMarketAnalyses")
  discoveryModels   DiscoveryModel[] @relation("UserDiscoveryModels")
  discoveryExecutions DiscoveryExecution[] @relation("UserDiscoveryExecutions")
  
  @@map("users")
}

model Team {
  id        String   @id @default(cuid())
  name      String
  industry  String
  leadId    String?
  
  // Relations
  members   User[]
  campaigns Campaign[] @relation("TeamCampaigns")
  leads     Lead[]    @relation("TeamLeads")
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("teams")
}

// Campaign and Scoring Models
model Campaign {
  id              String         @id @default(cuid())
  name            String
  industry        String
  status          String         @default("PLANNING")
  scoringModelId  String?
  scoringModel    ScoringModel?  @relation(fields: [scoringModelId], references: [id])
  assignedTeamId  String?
  assignedTeam    Team?          @relation("TeamCampaigns", fields: [assignedTeamId], references: [id])
  createdById     String
  createdBy       User           @relation("CampaignCreator", fields: [createdById], references: [id])
  
  // Campaign targets
  targetLeadCount Int?
  currentLeadCount Int @default(0)
  
  // Timeline
  startDate       DateTime?
  targetEndDate   DateTime?
  actualEndDate   DateTime?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  leads Lead[]
  
  @@map("campaigns")
}

model ScoringModel {
  id        String   @id @default(cuid())
  name      String
  industry  String
  isActive  Boolean  @default(true)
  createdById String
  createdBy User     @relation("ScoringModelCreator", fields: [createdById], references: [id])
  
  // Relations
  criteria ScoringCriterion[]
  campaigns Campaign[]
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("scoring_models")
}

model ScoringCriterion {
  id          String   @id @default(cuid())
  name        String
  description String?
  searchTerms String   // JSON string for SQLite compatibility
  weight      Int      // 0-100, must sum to 100 across all criteria
  type        String   @default("KEYWORD")
  
  // Relations
  scoringModelId String
  scoringModel   ScoringModel @relation(fields: [scoringModelId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("scoring_criteria")
}

// Lead Management Models
model Lead {
  id        String   @id @default(cuid())
  url       String
  companyName String
  domain    String
  industry  String
  status    String   @default("RAW")
  score     Float?
  
  // Integration fields
  externalId String?
  externalSource String?
  
  // Relations
  campaignId String
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  assignedToId String?
  assignedTo User?   @relation("LeadAssignee", fields: [assignedToId], references: [id])
  assignedTeamId String?
  assignedTeam Team? @relation("TeamLeads", fields: [assignedTeamId], references: [id])
  
  // Scoring
  scoringDetails ScoringResult?
  
  // Enrichment
  enrichment LeadEnrichment?
  
  // Workflow executions
  workflowExecutions WorkflowExecution[] @relation("LeadWorkflowExecutions")
  
  // AI Discovery Relations
  discoveryExecution DiscoveryExecution? @relation("DiscoveryExecutionLeads", fields: [discoveryExecutionId], references: [id])
  discoveryExecutionId String?
  
  // Timestamps
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  lastScoredAt DateTime?
  
  @@map("leads")
}

model ScoringResult {
  id        String   @id @default(cuid())
  totalScore Float
  confidence Float
  scoredAt   DateTime @default(now())
  scoringModelVersion String
  
  // Relations
  leadId    String @unique
  lead      Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)
  
  // Criteria scores
  criteriaScores CriterionScore[]
  
  @@map("scoring_results")
}

model CriterionScore {
  id           String @id @default(cuid())
  criterionId  String
  score        Float
  matchedContent String   // JSON string for SQLite compatibility
  confidence   Float
  
  // Relations
  scoringResultId String
  scoringResult   ScoringResult @relation(fields: [scoringResultId], references: [id], onDelete: Cascade)
  
  @@map("criterion_scores")
}

// Enrichment Models
model LeadEnrichment {
  id          String @id @default(cuid())
  companySize Int?
  revenue     String?
  industry    String?
  technologies String   // JSON string for SQLite compatibility
  
  // Enhanced web scraping data storage
  scrapedContent String?     // Full page content (truncated for storage)
  pageTitle String?          // Page title from metadata
  pageDescription String?    // Meta description
  pageKeywords String?       // Meta keywords as JSON string
  pageLanguage String?       // Page language
  lastModified String?       // Last modified date
  
  // Structured data from scraping
  companyName String?        // Extracted company name
  services String?           // JSON string of detected services
  certifications String?     // JSON string of certifications
  contactEmail String?       // Primary contact email
  contactPhone String?       // Primary contact phone
  contactAddress String?     // Contact address
  
  // Scraping metadata
  scrapingTimestamp DateTime @default(now())
  processingTime Int?        // Time taken to scrape in milliseconds
  scrapingSuccess Boolean @default(true)
  scrapingError String?      // Error message if scraping failed
  
  // Relations
  leadId      String @unique
  lead        Lead   @relation(fields: [leadId], references: [id], onDelete: Cascade)
  contacts    Contact[]
  
  // Metadata
  source      String @default("WEB_SCRAPING")
  enrichedAt  DateTime @default(now())
  
  @@map("lead_enrichments")
}

model Contact {
  id              String @id @default(cuid())
  name            String
  email           String?
  title           String?
  linkedinUrl     String?
  isPrimaryContact Boolean @default(false)
  
  // Relations
  enrichmentId    String
  enrichment      LeadEnrichment @relation(fields: [enrichmentId], references: [id], onDelete: Cascade)
  
  @@map("contacts")
}

// Note: Using string fields instead of enums for SQLite compatibility
// UserRole: "SUPER_ADMIN", "ANALYST", "VIEWER"
// UserStatus: "ACTIVE", "INACTIVE", "SUSPENDED", "PENDING"
// CampaignStatus: "PLANNING", "ACTIVE", "PAUSED", "COMPLETED", "CANCELLED"
// LeadStatus: "RAW", "SCORED", "QUALIFIED", "DELIVERED", "REJECTED"
// CriterionType: "KEYWORD", "PHRASE", "PRESENCE", "COUNT"
// EnrichmentSource: "CLEARBIT", "MANUAL"

// AI/ML Models
model AIModel {
  id        String   @id @default(cuid())
  name      String
  type      String   // "regression", "classification", "ensemble"
  features  String   // JSON string for SQLite compatibility
  performance String  // JSON string for SQLite compatibility
  isActive  Boolean  @default(true)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("ai_models")
}

// AI Market Discovery Models
model MarketAnalysis {
  id        String   @id @default(cuid())
  name      String   // e.g., "US Industries 300K+ Locations Analysis"
  criteria  String   // JSON: {minLocations: 300000, geography: "US", filters: [...]}
  results   String   // JSON: [{industry: "Plumbing", naicsCode: "238220", count: 412000, subIndustries: [...]}]
  status    String   @default("completed") // "pending", "running", "completed", "failed"
  
  // User attribution
  createdById String
  createdBy   User   @relation("UserMarketAnalyses", fields: [createdById], references: [id])
  
  // Relations
  discoveryModels DiscoveryModel[]
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("market_analyses")
}

model DiscoveryModel {
  id        String   @id @default(cuid())
  name      String   // e.g., "Commercial Plumbing - Water Jetting Equipment"
  
  // Market Context
  industry      String   // e.g., "Plumbing"
  subIndustry   String   // e.g., "Commercial Plumbing"
  product       String   // e.g., "High-pressure water jetting systems"
  marketSize    Int?     // Number of potential customers (e.g., 89000)
  
  // AI-Generated Configuration
  buyerProfile    String   // JSON: {companySize: [10,100], services: [...], painPoints: [...], budget: [15000,50000]}
  searchStrategy  String   // JSON: {keywords: [...], excludeTerms: [...], geoTargeting: [...], sources: [...]}
  targetCriteria  String   // JSON: {industryIndicators: [...], sizeIndicators: [...], techAdoption: [...]}
  
  // Configuration & Status
  isActive        Boolean  @default(true)
  lastExecuted    DateTime?
  executionCount  Int      @default(0)
  
  // Performance Metrics
  performanceMetrics String? // JSON: {avgQualityScore: 85, avgConversionRate: 0.15, costPerLead: 2.50}
  
  // User Attribution
  createdById String
  createdBy   User   @relation("UserDiscoveryModels", fields: [createdById], references: [id])
  
  // Relations
  marketAnalysisId String?
  marketAnalysis   MarketAnalysis? @relation(fields: [marketAnalysisId], references: [id])
  executions       DiscoveryExecution[]
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("discovery_models")
}

model DiscoveryExecution {
  id        String   @id @default(cuid())
  name      String   // e.g., "Commercial Plumbing Discovery - Dec 2024"
  
  // Status & Progress
  status    String   @default("planning") // "planning", "discovering", "analyzing", "qualifying", "completed", "failed"
  phase     String   @default("market_research") // "market_research", "web_discovery", "content_analysis", "qualification", "lead_creation"
  
  // Progress Tracking
  prospectsFound     Int @default(0)
  prospectsAnalyzed  Int @default(0)
  leadsQualified     Int @default(0)
  leadsCreated       Int @default(0)
  
  // Execution Configuration
  executionConfig String   // JSON: {sources: ["google", "linkedin"], maxResults: 5000, qualityThreshold: 75}
  
  // Results & Analytics
  sourceResults   String?  // JSON: {google: {found: 2500, processed: 2500}, linkedin: {found: 1200, processed: 1200}}
  analysisResults String?  // JSON: {totalAnalyzed: 4500, avgQualityScore: 78, qualificationRate: 0.28}
  qualityMetrics  String?  // JSON: {relevanceScore: 85, confidenceScore: 92, completenessScore: 88}
  
  // Error Handling
  errorMessage    String?
  errorDetails    String?  // JSON: detailed error information
  
  // Performance & Cost
  totalCost       Float?
  avgLeadCost     Float?
  processingTime  Int?     // milliseconds
  
  // Relations
  discoveryModelId String
  discoveryModel   DiscoveryModel @relation(fields: [discoveryModelId], references: [id], onDelete: Cascade)
  prospects        DiscoveredProspect[]
  createdLeads     Lead[] @relation("DiscoveryExecutionLeads")
  
  // User Attribution
  triggeredById String?
  triggeredBy   User?  @relation("UserDiscoveryExecutions", fields: [triggeredById], references: [id])
  
  // Timestamps
  startedAt   DateTime @default(now())
  completedAt DateTime?
  updatedAt   DateTime @updatedAt
  
  @@map("discovery_executions")
}

model DiscoveredProspect {
  id        String   @id @default(cuid())
  
  // Basic Company Information
  companyName String?
  domain      String?
  url         String
  
  // Discovery Source
  source      String   // "google_search", "linkedin", "directory", "referral"
  sourceId    String?  // Original ID from source system
  
  // Raw Data & Analysis
  rawData         String   // JSON: all discovered data from source
  contentAnalysis String?  // JSON: AI analysis of website content
  
  // AI Scoring & Qualification
  relevanceScore    Float?   // 0-100: How well prospect matches buyer profile
  qualityScore      Float?   // 0-100: Overall data quality and completeness
  confidenceScore   Float?   // 0-100: AI confidence in analysis
  
  // Qualification Status
  isQualified            Boolean  @default(false)
  qualifiedAt            DateTime?
  disqualificationReason String?
  
  // Lead Conversion
  leadCreated   Boolean  @default(false)
  leadCreatedAt DateTime?
  leadId        String?
  
  // Relations
  discoveryExecutionId String
  discoveryExecution   DiscoveryExecution @relation(fields: [discoveryExecutionId], references: [id], onDelete: Cascade)
  
  // Timestamps
  discoveredAt DateTime @default(now())
  analyzedAt   DateTime?
  updatedAt    DateTime @updatedAt
  
  @@map("discovered_prospects")
}

// Audit Log Models
model AuditLog {
  id          String   @id @default(cuid())
  action      String   // e.g., "CREATE", "UPDATE", "DELETE", "LOGIN", "LOGOUT"
  entityType  String   // e.g., "LEAD", "CAMPAIGN", "USER", "SCORING_MODEL"
  entityId    String?  // ID of the affected entity (null for system events)
  description String   // Human-readable description of the action
  
  // User attribution
  userId      String?
  user        User?    @relation("UserAuditLogs", fields: [userId], references: [id])
  
  // Additional context
  metadata    String?  // JSON string for additional data
  ipAddress   String?
  userAgent   String?
  
  // Timestamps
  createdAt   DateTime @default(now())
  
  @@map("audit_logs")
}

// Integration Hub Models
model Integration {
  id        String   @id @default(cuid())
  name      String
  type      String   // "crm", "marketing", "email", "analytics", "custom"
  provider  String   // "salesforce", "hubspot", "mailchimp", "zapier", "custom"
  config    String   // JSON string for configuration (API keys, URLs, etc.)
  isActive  Boolean  @default(true)
  lastSync  DateTime?
  syncStatus String  @default("idle") // "idle", "syncing", "error", "success"
  errorMessage String?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("integrations")
}

// Workflow Automation Models
model Workflow {
  id          String   @id @default(cuid())
  name        String
  description String?
  trigger     String   // "lead_created", "lead_scored", "lead_status_changed", "manual"
  isActive    Boolean  @default(true)
  priority    Int      @default(0) // Higher number = higher priority
  
  // Relations
  createdById String
  createdBy   User     @relation("WorkflowCreator", fields: [createdById], references: [id])
  steps       WorkflowStep[]
  executions  WorkflowExecution[]
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("workflows")
}

model WorkflowStep {
  id          String   @id @default(cuid())
  name        String
  type        String   // "action", "condition", "delay", "notification", "integration"
  order       Int      // Execution order within workflow
  config      String   // JSON string for step configuration
  
  // Relations
  workflowId  String
  workflow    Workflow @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("workflow_steps")
}

model WorkflowExecution {
  id          String   @id @default(cuid())
  status      String   // "running", "completed", "failed", "cancelled"
  startedAt   DateTime @default(now())
  completedAt DateTime?
  errorMessage String?
  
  // Relations
  workflowId  String
  workflow    Workflow @relation(fields: [workflowId], references: [id])
  leadId      String?
  lead        Lead?    @relation("LeadWorkflowExecutions", fields: [leadId], references: [id])
  triggeredById String?
  triggeredBy User?    @relation("UserWorkflowExecutions", fields: [triggeredById], references: [id])
  
  // Execution context and details
  triggerData String?  // JSON string for trigger context data
  stepResults String?  // JSON string for step execution results
  executionContext String? // JSON string for full execution context
  
  @@map("workflow_executions")
}

// Business Rules Models
model BusinessRule {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String   // "assignment", "scoring", "notification", "status_change", "enrichment"
  conditions  String   // JSON string for rule conditions
  actions     String   // JSON string for rule actions
  isActive    Boolean  @default(true)
  priority    Int      @default(0) // Higher number = higher priority
  
  // Relations
  createdById String
  createdBy   User     @relation("BusinessRuleCreator", fields: [createdById], references: [id])
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("business_rules")
}

// System Configuration Model
model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  description String?
  isEncrypted Boolean @default(false)
  category  String   @default("GENERAL")
  
  // Relations
  createdById String
  createdBy   User     @relation("ConfigCreator", fields: [createdById], references: [id])
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("system_configs")
}

// Claude API Usage Tracking Model
model ClaudeUsage {
  id        String   @id @default(cuid())
  totalCalls Int     @default(0)
  totalTokens Int    @default(0)
  averageResponseTime Float @default(0)
  errors    Int      @default(0)
  lastCall  DateTime?
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("claude_usage")
}

// Apify Integration Models
model ApifyActor {
  id          String   @id @default(cuid())
  name        String
  description String?
  actorId     String   // Apify Actor ID
  apiToken    String   // Encrypted API token
  isActive    Boolean  @default(true)
  defaultInput String? // Default input configuration as JSON string
  
  // Relations
  createdById String
  createdBy   User     @relation("ApifyActorCreator", fields: [createdById], references: [id])
  
  // Timestamps
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@map("apify_actors")
}

model ApifyScrapingJob {
  id          String   @id @default(cuid())
  actorId     String
  urls        String   // JSON array of URLs
  industry    String   @default("general")
  status      String   @default("pending") // pending, running, completed, failed
  results     String?  // Scraping results as JSON string
  error       String?
  apifyRunId  String?  // Apify run ID
  
  // Timestamps
  createdAt   DateTime @default(now())
  completedAt DateTime?
  
  @@map("apify_scraping_jobs")
}
